import java.util.*;
public class BFSDigraph {
 private int V;
 private LinkedList<Integer> adj[];
 BFSDigraph(int v) {
 V = v;
 adj = new LinkedList[v];
 for (int i=0; i<v; ++i)
 adj[i] = new LinkedList();
 }
 void addEdge(int v,int w) {
 adj[v].add(w);
 }
 void BFS(int s) {
 boolean visited[] = new boolean[V];
 LinkedList<Integer> queue = new LinkedList<>();
 visited[s]=true;
 queue.add(s);
 while (queue.size() != 0) {
 s = queue.poll();
 System.out.print(s+" ");
 Iterator<Integer> i = adj[s].listIterator();
 while (i.hasNext()) {
 int n = i.next();
 if (!visited[n]) {
 visited[n] = true;
 queue.add(n);
 }
 }
 }
 }
 public static void main(String args[]) {
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter the Starting Node in Digraph with nodes[0,1,2,3] : ");
 int startNode = sc.nextInt();
 BFSDigraph g = new BFSDigraph(4); // Assuming there are 4 nodes in the graph
 g.addEdge(0, 1);
 g.addEdge(0, 2);
 g.addEdge(1, 2);
 g.addEdge(2, 3);
 System.out.println("Nodes reachable from node " + startNode + " are:");
 g.BFS(startNode);
 }
}
