import java.util.*;

public class HeapSort {
    public static void main(String[] args) {
        // Generate 100 random 3-digit numbers
        int[] numbers = generateRandomNumbers(100);

        long totalTime = 0;

        // Run Heap Sort 10 times
        for (int i = 0; i < 10; i++) {
            int[] copy = Arrays.copyOf(numbers, numbers.length);

            long startTime = System.nanoTime();
            heapSort(copy);
            long endTime = System.nanoTime();

            long duration = (endTime - startTime) / 1000000; // Convert to milliseconds
            System.out.println("Time taken for iteration " + (i + 1) + ": " + duration + "ms");
            totalTime += duration;
        }

        // Calculate average time
        long averageTime = totalTime / 10;

        System.out.println("Avg time of 10 iterations to sort using Heap sort: " + averageTime + "ms");
    }

    // Generate 100 random 3-digit numbers
    private static int[] generateRandomNumbers(int count) {
        Random random = new Random();
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = random.nextInt(900) + 100; // Generate random 3-digit numbers
        }
        return numbers;
    }

    // Heap Sort implementation
    private static void heapSort(int[] arr) {
        int n = arr.length;

        // Build max heap
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        // Heap sort
        for (int i = n - 1; i > 0; i--) {
            // Swap root (maximum element) with last element
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Heapify root element
            heapify(arr, i, 0);
        }
    }

    private static void heapify(int[] arr, int n, int i) {
        int largest = i; // Initialize largest as root
        int left = 2 * i + 1; // Left child
        int right = 2 * i + 2; // Right child

        // If left child is larger than root
        if (left < n && arr[left] > arr[largest])
            largest = left;

        // If right child is larger than largest so far
        if (right < n && arr[right] > arr[largest])
            largest = right;

        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }
}
