import java.util.*;

public class RadixSort {
    public static void main(String[] args) {
        // Generate 100 random 3-digit numbers
        int[] numbers = generateRandomNumbers(100);

        long totalTime = 0;

        // Run Radix Sort 10 times
        for (int i = 0; i < 10; i++) {
            int[] copy = Arrays.copyOf(numbers, numbers.length);

            long startTime = System.nanoTime();
            radixSort(copy);
            long endTime = System.nanoTime();

            long duration = (endTime - startTime) / 1000000; // Convert to milliseconds
            System.out.println("Time taken for iteration " + (i + 1) + ": " + duration + "ms");
            totalTime += duration;
        }

        // Calculate average time
        long averageTime = totalTime / 10;

        System.out.println("Avg time of 10 iterations to sort using Radix sort: " + averageTime + "ms");
    }

    // Generate 100 random 3-digit numbers
    private static int[] generateRandomNumbers(int count) {
        Random random = new Random();
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = random.nextInt(900) + 100; // Generate random 3-digit numbers
        }
        return numbers;
    }

    // Radix Sort implementation
    private static void radixSort(int[] arr) {
        int max = Arrays.stream(arr).max().getAsInt();
        for (int exp = 1; max / exp > 0; exp *= 10) {
            countSort(arr, exp);
        }
    }

    private static void countSort(int[] arr, int exp) {
        int n = arr.length;
        int[] output = new int[n];
        int[] count = new int[10];

        Arrays.fill(count, 0);

        for (int i = 0; i < n; i++) {
            count[(arr[i] / exp) % 10]++;
        }

        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }

        System.arraycopy(output, 0, arr, 0, n);
    }
}
