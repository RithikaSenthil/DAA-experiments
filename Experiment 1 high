import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

class DisjointSet {
    int[] parent, rank;

    public DisjointSet(int n) {
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    int find(int i) {
        if (i != parent[i])
            parent[i] = find(parent[i]);
        return parent[i];
    }

    void union(int x, int y) {
        int xRoot = find(x);
        int yRoot = find(y);

        if (xRoot == yRoot)
            return;

        if (rank[xRoot] < rank[yRoot])
            parent[xRoot] = yRoot;
        else if (rank[xRoot] > rank[yRoot])
            parent[yRoot] = xRoot;
        else {
            parent[yRoot] = xRoot;
            rank[xRoot]++;
        }
    }
}

class Graph {
    int V, E;
    Edge[] edges;

    public Graph(int V, int E) {
        this.V = V;
        this.E = E;
        edges = new Edge[E];
    }

    public void addEdge(int src, int dest, int weight, int i) {
        edges[i] = new Edge(src, dest, weight);
    }

    public int kruskalMST() {
        int mstWeight = 0;
        Arrays.sort(edges);

        DisjointSet ds = new DisjointSet(V);

        for (Edge edge : edges) {
            int srcRoot = ds.find(edge.src);
            int destRoot = ds.find(edge.dest);

            if (srcRoot != destRoot) {
                mstWeight += edge.weight;
                ds.union(srcRoot, destRoot);
            }
        }
        return mstWeight;
    }
}

public class Main {
    public static void main(String[] args) {
        int V = 5; // Number of vertices
        int E = 7; // Number of edges

        // Create a graph
        Graph graph = new Graph(V, E);
        graph.addEdge(0, 1, 2, 0);
        graph.addEdge(0, 3, 6, 1);
        graph.addEdge(1, 2, 3, 2);
        graph.addEdge(1, 3, 8, 3);
        graph.addEdge(1, 4, 5, 4);
        graph.addEdge(2, 4, 7, 5);
        graph.addEdge(3, 4, 9, 6);

        long startTime, endTime;

        // Run Kruskal's algorithm 10 times
        for (int i = 0; i < 10; i++) {
            startTime = System.nanoTime();
            int mstWeight = graph.kruskalMST();
            endTime = System.nanoTime();
            long duration = (endTime - startTime) / 1000000; // in milliseconds
            System.out.println("MST found in iteration " + (i+1) + ": " + mstWeight + ", Time: " + duration + "ms");
        }
    }
}
