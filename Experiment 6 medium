package sanga;
import java.util.*;
class Graph {
 private int V;
 private LinkedList<Integer> adj[];
 Graph(int v) {
 V = v;
 adj = new LinkedList[v];
 for (int i = 0; i < v; ++i)
 adj[i] = new LinkedList();
 }
 void addEdge(int v, int w) {
 adj[v].add(w);
 }
 void BFSUtil(int v, boolean visited[]) {
 visited[v] = true;
 System.out.print(v + " ");
 Iterator<Integer> i = adj[v].listIterator();
 while (i.hasNext()) {
 int n = i.next();
 if (!visited[n])
 BFSUtil(n, visited);
 }
 }
 void BFS(int v) {
 boolean visited[] = new boolean[V];
 BFSUtil(v, visited);
 }
}
public class BFSDigraph {
 public static void main(String args[]) {
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter the Starting Node in Digraph with nodes[0,1,2,3]: ");
 int startNode = sc.nextInt();

 Graph g = new Graph(4); // Modify the value to the number of nodes in your graph
 g.addEdge(0, 1);
 g.addEdge(0, 2);
 g.addEdge(1, 2);
 g.addEdge(2, 0);
 g.addEdge(2, 3);
 g.addEdge(3, 3);
 System.out.println("Nodes reachable from node " + startNode + " are:");
 g.BFS(startNode);
 }
}
