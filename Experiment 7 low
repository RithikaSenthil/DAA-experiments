import java.util.Scanner;
public class ConnectedGraphCheck {
 private int V; // Number of vertices
 private int[][] adjMatrix; // Adjacency matrix
 // Constructor to initialize the graph
 public ConnectedGraphCheck(int v) {
 V = v;
 adjMatrix = new int[V][V];
 }
 // Function to perform DFS traversal recursively
 private void DFSUtil(int v, boolean[] visited) {
 visited[v] = true;
 for (int i = 0; i < V; i++) {
 if (adjMatrix[v][i] == 1 && !visited[i]) {
 DFSUtil(i, visited);
 }
 }
 }
 // Function to check if the graph is connected
 public boolean isConnected() {
 boolean[] visited = new boolean[V];
 DFSUtil(0, visited); // Start DFS traversal from vertex 0
 // Check if all vertices are visited
 for (boolean v : visited) {
 if (!v)
 return false; // If any vertex is not visited, graph is not connected
 }
 return true;
 }
 public static void main(String[] args) {
 Scanner scanner = new Scanner(System.in);
 System.out.print("Enter Number of Nodes: ");
 int n = scanner.nextInt();
 ConnectedGraphCheck graph = new ConnectedGraphCheck(n);
 System.out.println("Enter the adjacency Matrix:");
 for (int i = 0; i < n; i++) {
 for (int j = 0; j < n; j++) {
 graph.adjMatrix[i][j] = scanner.nextInt();
 }
 }
 if (graph.isConnected()) {
 System.out.println("Is graph connected? Yes");
 } else {
 System.out.println("Is graph connected? No");
 }
 }
}
