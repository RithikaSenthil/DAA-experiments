import java.util.*;

class Graph {
    private int V;
    private List<List<Edge>> adj;

    public Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++)
            adj.add(new ArrayList<>());
    }

    public void addEdge(int u, int v, int weight) {
        Edge e1 = new Edge(v, weight);
        Edge e2 = new Edge(u, weight);
        adj.get(u).add(e1);
        adj.get(v).add(e2);
    }

    public long primMST() {
        long mstWeight = 0;

        boolean[] inMST = new boolean[V];
        int[] key = new int[V];
        Arrays.fill(key, Integer.MAX_VALUE);
        key[0] = 0;

        PriorityQueue<Edge> pq = new PriorityQueue<>(V, Comparator.comparingInt(o -> o.weight));
        pq.offer(new Edge(0, 0));

        while (!pq.isEmpty()) {
            int u = pq.poll().dest;

            if (inMST[u])
                continue;

            inMST[u] = true;
            mstWeight += key[u];

            for (Edge e : adj.get(u)) {
                int v = e.dest;
                int weight = e.weight;
                if (!inMST[v] && weight < key[v]) {
                    key[v] = weight;
                    pq.offer(new Edge(v, weight));
                }
            }
        }

        return mstWeight;
    }

    static class Edge {
        int dest, weight;

        public Edge(int dest, int weight) {
            this.dest = dest;
            this.weight = weight;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        int V = 5; // Number of vertices
        int E = 7; // Number of edges

        Graph graph = new Graph(V);
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 6);
        graph.addEdge(1, 2, 3);
        graph.addEdge(1, 3, 8);
        graph.addEdge(1, 4, 5);
        graph.addEdge(2, 4, 7);
        graph.addEdge(3, 4, 9);

        long startTime, endTime;

        // Run Prim's algorithm 10 times
        for (int i = 0; i < 10; i++) {
            startTime = System.nanoTime();
            long mstWeight = graph.primMST();
            endTime = System.nanoTime();
            long duration = (endTime - startTime) / 1000000; // in milliseconds
            System.out.println("MST found in iteration " + (i + 1) + ": " + mstWeight + ", Time: " + duration + "ms");
        }
    }
}
